
export default [
  {
    "title": "Building a Real-Time NHL Scoreboard with Supabase",
    "date": "2024-12-11",
    "author": "Kyle McCracken",
    "description": "Learn how to implement real-time sports updates using Supabase's Realtime feature, creating an efficient and scalable solution for live scoreboard updates.",
    "icon": "supabase.com",
    "coverImage": "./score-board.webp",
    "coverImagePath": "https://media.kytech.ca/blog/score-board.webp",
    "content": "Ever wondered how to build a live-updating sports scoreboard without hammering your API with constant requests?\n\n<Image src={'https://media.kytech.ca/blog/score-board.webp'} alt=\"Score board\" />\n\nI faced this exact challenge while developing [Benchwarmers](https://benchwarmers.app). The solution I found was surprisingly elegant and efficient, using Supabase's real-time functionality in a way that might not be immediately obvious from the docs.\n\n## The Challenge üèí\n\nBuilding a real-time scoreboard for NHL games presented three key requirements:\n\n1. Fetching current scores for all NHL games\n2. Updating scores in real-time as games progress\n3. Displaying the data in an engaging way\n\nThe first requirement was straightforward - the NHL API's Boxscore endpoint provides comprehensive game data. The visual presentation was handled beautifully by my UI stack (NextJS + Tailwind + Shadcn/UI + Framer Motion). But the real challenge lay in that middle requirement: real-time updates.\n\n## Exploring the Options\n\nInitially, I considered several traditional approaches:\n\n- **Polling intervals**: Regularly fetching data every few seconds\n- **Cron jobs**: Scheduled server-side updates\n- **Webhook systems**: Listening for external triggers\n\nEach of these solutions had significant drawbacks:\n- Polling creates unnecessary server load\n- Cron jobs might miss rapid updates\n- Webhooks require complex setup and maintenance\n\nThat's when I discovered that Supabase's Realtime feature could be used for more than just chat applications. In fact, it took just 15 minutes to implement real-time synchronization between my Postgres database and frontend!\n\n## Setting Up Supabase Realtime\n\nLet's walk through the implementation step by step.\n\n### 1. Database Configuration\n\nFirst, you'll need to set up your Supabase database properly. Here's what you need:\n\n1. Create a table in your database (I used a custom schema called `gamecenter`)\n2. Enable Realtime for your table in the Supabase dashboard\n3. Ensure your schema is exposed in your REST API configuration\n  \n<Code\n    code={`\n    CREATE TABLE gamecenter.game_boxscore (\n      game_id TEXT PRIMARY KEY,\n      home_team_score INTEGER,\n      away_team_score INTEGER,\n      period INTEGER,\n      time_remaining TEXT,\n      game_state TEXT,\n      last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n    );\n    `}\n  filename=\"game_boxscore.sql\"\n  language=\"sql\"\n  lineNumbers={false}\n  themes={{light: \"one-light\", dark: \"github-dark\"}}\n/>\n\n\n### Enable Realtime in Supabase Dashboard\n\nNavigate to your table settings in the Supabase dashboard and enable Realtime:\n\t1.\tGo to Database ‚Üí Tables\n\t2.\tSelect your table\n\t3.\tClick on \"Enable Realtime\"\nThis creates the necessary Postgres publication under the hood.\n\n### 3. Understanding Realtime Mechanisms\n\nSupabase's Realtime functionality offers three distinct modes:\n\n1. Broadcast: Send ephemeral messages between clients\n2. Presence: Track and sync shared state\n3. Postgres Changes: Listen to database changes\nFor our scoreboard, we're using Postgres Changes, which leverages Postgres' native replication system. This means:\n\t‚Ä¢\tChanges are propagated instantly\n\t‚Ä¢\tNo additional infrastructure needed\n\t‚Ä¢\tBuilt-in security through Postgres' Row Level Security (RLS)\n\n### Implementation Structure\n\nHere's how I organized the code in my Next.js application:\n\n```sh\n‚îú‚îÄ‚îÄ app                         \n‚îÇ    ‚îú‚îÄ‚îÄ scores                     \n‚îÇ       ‚îú‚îÄ‚îÄ [game_id]           # Dynamic route for individual games\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ page.tsx       # Server Component (initial data fetch)\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ boxscore.tsx   # Client Component (realtime updates)\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ types.ts       # Type definitions\n```\n\n### Fetching Initial Data\n\nFirst, let's set up our server component to fetch the initial state:\n<Code\n    code={`export default async function GamePage({ params }: { params: { game_id: string } }) {\n  const supabase = createServerComponentClient<Database>()\n  \n  // Fetch initial data with no caching\n  const [boxscoreData, gameLogData] = await Promise.all([\n    supabase.schema('gamecenter')\n      .from('game_boxscore')\n      .select('*')\n      .eq('game_id', params.game_id)\n      .limit(1),\n    supabase.schema('gamecenter')\n      .from('game_events')\n      .select('*')\n      .eq('game_id', params.game_id)\n      .in('type_code', ['503', '509', '505', '520', '521', '506', '507'])\n      .order('time_remaining', { ascending: true }),\n  ])\n\n  return (\n    <Boxscore \n      initialBoxscore={boxscoreData.data?.[0]} \n      initialGameLog={gameLogData.data}\n      game_id={params.game_id}\n    />\n  )\n}\n`}\n  filename=\"page.tsx\"\n  language=\"tsx\"\n  lineNumbers={false}\n  themes={{light: \"one-light\", dark: \"github-dark-high-contrast\"}}\n/>\n\n\n\n### Setting Up Real-Time Subscription\n\nNow, let's implement the client component that handles real-time updates:\n\n```tsx\n// boxscore.tsx\nexport default function Boxscore({ \n  initialBoxscore, \n  initialGameLog, \n  game_id \n}: BoxscoreProps) {\n  const [boxscore_live, setBoxscore_live] = useState(initialBoxscore)\n  const supabase = createClientComponentClient<Database>()\n\n  useEffect(() => {\n    // Create a realtime channel\n    const boxscoreChannel = supabase.channel('game-updates')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',  // Listen to all events\n          schema: 'gamecenter',\n          table: 'game_boxscore',\n          filter: `game_id=eq.${game_id}`\n        },\n        (payload) => {\n          console.log('Boxscore update:', payload)\n          setBoxscore_live(payload.new as Database['gamecenter']['Tables']['game_boxscore']['Row'])\n        }\n      )\n      .subscribe()\n\n    // Cleanup subscription\n    return () => {\n      supabase.removeChannel(boxscoreChannel)\n    }\n  }, [supabase, game_id])\n\n  // Render your UI using boxscore_live\n  return (\n    <div>\n      {/* Your scoreboard UI components */}\n    </div>\n  )\n}\n```\n\n### Important Considerations\n\n- Channel Management:\n\t- Channel names ('game-updates') should be unique per subscription type\n\t- Consider using dynamic channel names for multiple game subscriptions\n\n### Event Filtering:\n\n```tsx\nevent: '*'  // Listens to INSERT, UPDATE, DELETE\n// Or specific events:\nevent: 'UPDATE'  // Only listen to updates\n```\n\n### Performance Optimization:\n\t- Always implement cleanup functions\n\t- Use appropriate filters to minimize unnecessary updates\n\t- Consider batching updates if dealing with high-frequency changes\n\n### Error Handling:\n```tsx\n.on('error', (error) => {\n  console.error('Realtime subscription error:', error)\n  // Implement retry logic if needed\n})\n```\n\nThe Result\nThe final implementation provides:\n\t‚Ä¢\tInstant score updates without polling\n\t‚Ä¢\tEfficient resource usage\n\t‚Ä¢\tClean, maintainable code\n\t‚Ä¢\tExcellent user experience\n\n<Video \nsrc=\"https://data.benchwarmers.app/media/realtime_boxscore%201.mp4\"\nposter=\"/score-board.webp\"\nautoPlay\nloop\nmuted\ncontrols\n/>\n\n## Conclusion\n\nWhat started as a challenging requirement for real-time sports updates turned into an elegant solution using Supabase Realtime. Instead of complex polling mechanisms or inefficient API calls, we now have a robust, scalable system that:\n\n- Updates scores in real-time\n- Uses minimal server resources\n- Maintains clean, readable code\n- Provides an excellent user experience\n\nThe best part? This pattern isn't limited to sports scores. You can apply this same approach to:\n\n- Live dashboards\n- Real-time analytics\n- Collaborative features\n- Any data that needs instant updates\n\nRemember to consider your specific use case when implementing real-time features. While this solution worked perfectly for my sports scoreboard, you might need to adjust the approach based on your update frequency, data volume, and user requirements.\n\nGive it a try in your next project - you might be surprised at how simple real-time features can be with Supabase! üöÄ",
    "_meta": {
      "filePath": "building-a-real-time-nhl-scoreboard-with-supabase/page.mdx",
      "fileName": "page.mdx",
      "directory": "building-a-real-time-nhl-scoreboard-with-supabase",
      "extension": "mdx",
      "path": "building-a-real-time-nhl-scoreboard-with-supabase/page"
    },
    "slug": "building-a-real-time-nhl-scoreboard-with-supabase",
    "readTime": 5
  },
  {
    "title": "Introducing Animaginary: High performance web animations",
    "date": "2022-09-02",
    "author": "Adam Wathan",
    "description": "When you‚Äôre building a website for a company as ambitious as Planetaria, you need to make an impression. I wanted people to visit our website and see animations that looked more realistic than reality itself.",
    "icon": "tailwindcss.com",
    "coverImage": "./planetaria-design-system.png",
    "coverImagePath": "https://media.kytech.ca/blog/planetaria-design-system.png",
    "content": "When you‚Äôre building a website for a company as ambitious as Planetaria, you need to make an impression. I wanted people to visit our website and see animations that looked more realistic than reality itself.\n\nTo make this possible, we needed to squeeze every drop of performance out of the browser possible. And so Animaginary was born.\n\n<CodeEditor\n      className=\"mx-auto w-full max-w-3xl h-fit\"\n      code={`\nimport { animate } from '@planetaria/animaginary'\n\nexport function MyComponent({ open, children }) {\n  return (\n    <animate.div\n      in={open}\n      animateFrom=\"opacity-0 scale-95\"\n      animateTo=\"opacity-100 scale-100\"\n      duration={350}\n    >\n      {children}\n    </animate.div>\n  )\n}\n`}\n      lang=\"tsx\"\n      duration={0.5}\n      title='File Structure'\n      delay={0}\n      copyButton\n      theme=\"atom-dark\"\n/>\n\nAnimaginary is our new web animation library that redefines what you thought was possible on the web. Hand-written in optimized WASM, Animaginary can even animate the `height` property of an element at 60fps.\n\n## Sermone fata\n\nLorem markdownum, bracchia in redibam! Terque unda puppi nec, linguae posterior\nin utraque respicere candidus Mimasque formae; quae conantem cervice. Parcite\nvariatus, redolentia adeunt. Tyrioque dies, naufraga sua adit partibus celanda\ntorquere temptata, erit maneat et ramos, [iam](#) ait dominari\npotitus! Tibi litora matremque fumantia condi radicibus opusque.\n\nDeus feram verumque, fecit, ira tamen, terras per alienae victum. Mutantur\nlevitate quas ubi arcum ripas oculos abest. Adest [commissaque\nvictae](#) in gemitus nectareis ire diva\ndotibus ora, et findi huic invenit; fatis? Fractaque dare superinposita\nnimiumque simulatoremque sanguine, at voce aestibus diu! Quid veterum hausit tu\nnil utinam paternos ima, commentaque.\n\n```c\nexbibyte_wins = gigahertz(3);\ngrayscaleUtilityClient = control_uat;\npcmciaHibernate = oop_virus_console(text_mountain);\nif (stateWaisFirewire >= -2) {\n    jfs = 647065 / ldapVrml(tutorialRestore, 85);\n    metal_runtime_parse = roomComputingResolution - toolbarUpload +\n            ipx_nvram_open;\n} else {\n    maximizeSidebar *= suffix_url(flatbed + 2, requirements_encoding_node +\n            only_qbe_media, minicomputer);\n}\n```\n\nAere repetiti cognataque natus. Habebat vela solutis saepe munus nondum adhuc\noscula nomina pignora corpus deserat.\n\n## Lethaei Pindumve me quae dinumerat Pavor\n\nIdem se saxa fata pollentibus geminos; quos pedibus. Est urnis Herses omnes nec\ndivite: et ille illa furit sim verbis Cyllenius.\n\n1. Captus inpleverunt collo\n2. Nec nam placebant\n3. Siquos vulgus\n4. Dictis carissime fugae\n5. A tacitos nulla viginti\n\nUngues fistula annoso, ille addit linoque motatque uberior verso\n[rubuerunt](#) confine desuetaque. _Sanguine_ anteit\nemerguntque expugnacior est pennas iniqui ecce **haeret** genus: peiora imagine\nfossas Cephisos formosa! Refugitque amata [refelli](#)\nsupplex. Summa brevis vetuere tenebas, hostes vetantis, suppressit, arreptum\nregna. Postquam conpescit iuvenis habet corpus, et erratica, perdere, tot mota\nars talis.\n\n\n```c\ndigital.webcam_dual_frequency = webmasterMms;\nif (5 + language_standalone_google) {\n    cc_inbox_layout *= file_character;\n    task += p;\n    lockUnicode += enterprise_monochrome(tokenFunctionPersonal, keyVirtual,\n            adf);\n}\nwindows_binary_esports(87734, array(restoreRomTopology, adRaw(407314),\n        dongleBashThumbnail), interpreter);\n```\n\nSit volat naturam; motu Cancri. Erat pro simul quae valuit quoque timorem quam\nproelia: illo patrio _esse summus_, enim sua serpentibus, Hyleusque. Est coniuge\nrecuso; refert Coroniden ignotos manat, adfectu.",
    "_meta": {
      "filePath": "introducing-animaginary/page.mdx",
      "fileName": "page.mdx",
      "directory": "introducing-animaginary",
      "extension": "mdx",
      "path": "introducing-animaginary/page"
    },
    "slug": "introducing-animaginary",
    "readTime": 5
  },
  {
    "title": "Root Page",
    "date": "2024-12-11",
    "author": "Kyle McCracken",
    "description": "Root page content",
    "icon": "default",
    "coverImage": "",
    "content": "This is the root page content. This file is not processed by Content Collections as a blog post.\n\nexport default (props) => <ArticleLayout article={article} {...props} />\n\nEver wondered how to build a live-updating sports scoreboard without hammering your API with constant requests?\n\n<Image src={'https://media.kytech.ca/blog/score-board.webp'} alt=\"Score board\" />\n\nI faced this exact challenge while developing [Benchwarmers](https://benchwarmers.app). The solution I found was surprisingly elegant and efficient, using Supabase's real-time functionality in a way that might not be immediately obvious from the docs.\n\n## The Challenge üèí\n\nBuilding a real-time scoreboard for NHL games presented three key requirements:\n\n1. Fetching current scores for all NHL games\n2. Updating scores in real-time as games progress\n3. Displaying the data in an engaging way\n\nThe first requirement was straightforward - the NHL API's Boxscore endpoint provides comprehensive game data. The visual presentation was handled beautifully by my UI stack (NextJS + Tailwind + Shadcn/UI + Framer Motion). But the real challenge lay in that middle requirement: real-time updates.\n\n## Exploring the Options\n\nInitially, I considered several traditional approaches:\n\n- **Polling intervals**: Regularly fetching data every few seconds\n- **Cron jobs**: Scheduled server-side updates\n- **Webhook systems**: Listening for external triggers\n\nEach of these solutions had significant drawbacks:\n- Polling creates unnecessary server load\n- Cron jobs might miss rapid updates\n- Webhooks require complex setup and maintenance\n\nThat's when I discovered that Supabase's Realtime feature could be used for more than just chat applications. In fact, it took just 15 minutes to implement real-time synchronization between my Postgres database and frontend!\n\n## Setting Up Supabase Realtime\n\nLet's walk through the implementation step by step.\n\n### 1. Database Configuration\n\nFirst, you'll need to set up your Supabase database properly. Here's what you need:\n\n1. Create a table in your database (I used a custom schema called `gamecenter`)\n2. Enable Realtime for your table in the Supabase dashboard\n3. Ensure your schema is exposed in your REST API configuration\n  \n<Code\n    code={`\n    CREATE TABLE gamecenter.game_boxscore (\n      game_id TEXT PRIMARY KEY,\n      home_team_score INTEGER,\n      away_team_score INTEGER,\n      period INTEGER,\n      time_remaining TEXT,\n      game_state TEXT,\n      last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n    );\n    `}\n  filename=\"game_boxscore.sql\"\n  language=\"sql\"\n  lineNumbers={false}\n  themes={{light: \"one-light\", dark: \"github-dark\"}}\n/>\n\n\n### Enable Realtime in Supabase Dashboard\n\nNavigate to your table settings in the Supabase dashboard and enable Realtime:\n\t1.\tGo to Database ‚Üí Tables\n\t2.\tSelect your table\n\t3.\tClick on \"Enable Realtime\"\nThis creates the necessary Postgres publication under the hood.\n\n### 3. Understanding Realtime Mechanisms\n\nSupabase's Realtime functionality offers three distinct modes:\n\n1. Broadcast: Send ephemeral messages between clients\n2. Presence: Track and sync shared state\n3. Postgres Changes: Listen to database changes\nFor our scoreboard, we're using Postgres Changes, which leverages Postgres' native replication system. This means:\n\t‚Ä¢\tChanges are propagated instantly\n\t‚Ä¢\tNo additional infrastructure needed\n\t‚Ä¢\tBuilt-in security through Postgres' Row Level Security (RLS)\n\n### Implementation Structure\n\nHere's how I organized the code in my Next.js application:\n\n```sh\n‚îú‚îÄ‚îÄ app                         \n‚îÇ    ‚îú‚îÄ‚îÄ scores                     \n‚îÇ       ‚îú‚îÄ‚îÄ [game_id]           # Dynamic route for individual games\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ page.tsx       # Server Component (initial data fetch)\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ boxscore.tsx   # Client Component (realtime updates)\n‚îÇ       ‚îÇ    ‚îú‚îÄ‚îÄ types.ts       # Type definitions\n```\n\n### Fetching Initial Data\n\nFirst, let's set up our server component to fetch the initial state:\n<Code\n    code={`export default async function GamePage({ params }: { params: { game_id: string } }) {\n  const supabase = createServerComponentClient<Database>()\n  \n  // Fetch initial data with no caching\n  const [boxscoreData, gameLogData] = await Promise.all([\n    supabase.schema('gamecenter')\n      .from('game_boxscore')\n      .select('*')\n      .eq('game_id', params.game_id)\n      .limit(1),\n    supabase.schema('gamecenter')\n      .from('game_events')\n      .select('*')\n      .eq('game_id', params.game_id)\n      .in('type_code', ['503', '509', '505', '520', '521', '506', '507'])\n      .order('time_remaining', { ascending: true }),\n  ])\n\n  return (\n    <Boxscore \n      initialBoxscore={boxscoreData.data?.[0]} \n      initialGameLog={gameLogData.data}\n      game_id={params.game_id}\n    />\n  )\n}\n`}\n  filename=\"page.tsx\"\n  language=\"tsx\"\n  lineNumbers={false}\n  themes={{light: \"one-light\", dark: \"github-dark-high-contrast\"}}\n/>\n\n\n\n### Setting Up Real-Time Subscription\n\nNow, let's implement the client component that handles real-time updates:\n\n```tsx\n// boxscore.tsx\nexport default function Boxscore({ \n  initialBoxscore, \n  initialGameLog, \n  game_id \n}: BoxscoreProps) {\n  const [boxscore_live, setBoxscore_live] = useState(initialBoxscore)\n  const supabase = createClientComponentClient<Database>()\n\n  useEffect(() => {\n    // Create a realtime channel\n    const boxscoreChannel = supabase.channel('game-updates')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',  // Listen to all events\n          schema: 'gamecenter',\n          table: 'game_boxscore',\n          filter: `game_id=eq.${game_id}`\n        },\n        (payload) => {\n          console.log('Boxscore update:', payload)\n          setBoxscore_live(payload.new as Database['gamecenter']['Tables']['game_boxscore']['Row'])\n        }\n      )\n      .subscribe()\n\n    // Cleanup subscription\n    return () => {\n      supabase.removeChannel(boxscoreChannel)\n    }\n  }, [supabase, game_id])\n\n  // Render your UI using boxscore_live\n  return (\n    <div>\n      {/* Your scoreboard UI components */}\n    </div>\n  )\n}\n```\n\n### Important Considerations\n\n- Channel Management:\n\t- Channel names ('game-updates') should be unique per subscription type\n\t- Consider using dynamic channel names for multiple game subscriptions\n\n### Event Filtering:\n\n```tsx\nevent: '*'  // Listens to INSERT, UPDATE, DELETE\n// Or specific events:\nevent: 'UPDATE'  // Only listen to updates\n```\n\n### Performance Optimization:\n\t- Always implement cleanup functions\n\t- Use appropriate filters to minimize unnecessary updates\n\t- Consider batching updates if dealing with high-frequency changes\n\n### Error Handling:\n```tsx\n.on('error', (error) => {\n  console.error('Realtime subscription error:', error)\n  // Implement retry logic if needed\n})\n```\n\nThe Result\nThe final implementation provides:\n\t‚Ä¢\tInstant score updates without polling\n\t‚Ä¢\tEfficient resource usage\n\t‚Ä¢\tClean, maintainable code\n\t‚Ä¢\tExcellent user experience\n\n<Video \nsrc=\"https://data.benchwarmers.app/media/realtime_boxscore%201.mp4\"\nposter=\"/score-board.webp\"\nautoPlay\nloop\nmuted\ncontrols\n/>\n\n## Conclusion\n\nWhat started as a challenging requirement for real-time sports updates turned into an elegant solution using Supabase Realtime. Instead of complex polling mechanisms or inefficient API calls, we now have a robust, scalable system that:\n\n- Updates scores in real-time\n- Uses minimal server resources\n- Maintains clean, readable code\n- Provides an excellent user experience\n\nThe best part? This pattern isn't limited to sports scores. You can apply this same approach to:\n\n- Live dashboards\n- Real-time analytics\n- Collaborative features\n- Any data that needs instant updates\n\nRemember to consider your specific use case when implementing real-time features. While this solution worked perfectly for my sports scoreboard, you might need to adjust the approach based on your update frequency, data volume, and user requirements.\n\nGive it a try in your next project - you might be surprised at how simple real-time features can be with Supabase! üöÄ",
    "_meta": {
      "filePath": "page.mdx",
      "fileName": "page.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "page"
    },
    "slug": "page",
    "readTime": 5
  },
  {
    "title": "Why Supabase is the best choice for your next side project",
    "date": "2024-12-06",
    "author": "Kyle McCracken",
    "description": "Supabase is a powerful tool for building web applications, but it can be overwhelming to know where to start. In this article, we'll explore why Supabase is the best choice for your next side project.",
    "icon": "supabase.com",
    "coverImage": "./why-supabase.webp",
    "coverImagePath": "https://media.kytech.ca/blog/why-supabase.webp",
    "content": "A Full Stack approach to your backend Database.\n\n<Image src={'https://media.kytech.ca/blog/why-supabase.webp'} alt=\"Supabase\" />\n\nI knew that to get it right I was going to have to replicate the viewing conditions of someone from the future, so I grabbed my space helmet from the closet, created a new Figma document, and got to work.\n\n## Sermone fata\n\nLorem markdownum, bracchia in redibam! Terque unda puppi nec, linguae posterior\nin utraque respicere candidus Mimasque formae; quae conantem cervice. Parcite\nvariatus, redolentia adeunt. Tyrioque dies, naufraga sua adit partibus celanda\ntorquere temptata, erit maneat et ramos, [iam](#) ait dominari\npotitus! Tibi litora matremque fumantia condi radicibus opusque.\n\nDeus feram verumque, fecit, ira tamen, terras per alienae victum. Mutantur\nlevitate quas ubi arcum ripas oculos abest. Adest [commissaque\nvictae](#) in gemitus nectareis ire diva\ndotibus ora, et findi huic invenit; fatis? Fractaque dare superinposita\nnimiumque simulatoremque sanguine, at voce aestibus diu! Quid veterum hausit tu\nnil utinam paternos ima, commentaque.\n\n```c\nexbibyte_wins = gigahertz(3);\ngrayscaleUtilityClient = control_uat;\npcmciaHibernate = oop_virus_console(text_mountain);\nif (stateWaisFirewire >= -2) {\n    jfs = 647065 / ldapVrml(tutorialRestore, 85);\n    metal_runtime_parse = roomComputingResolution - toolbarUpload +\n            ipx_nvram_open;\n} else {\n    maximizeSidebar *= suffix_url(flatbed + 2, requirements_encoding_node +\n            only_qbe_media, minicomputer);\n}\n```\n\nAere repetiti cognataque natus. Habebat vela solutis saepe munus nondum adhuc\noscula nomina pignora corpus deserat.\n\n## Lethaei Pindumve me quae dinumerat Pavor\n\nIdem se saxa fata pollentibus geminos; quos pedibus. Est urnis Herses omnes nec\ndivite: et ille illa furit sim verbis Cyllenius.\n\n1. Captus inpleverunt collo\n2. Nec nam placebant\n3. Siquos vulgus\n4. Dictis carissime fugae\n5. A tacitos nulla viginti\n\nUngues fistula annoso, ille addit linoque motatque uberior verso\n[rubuerunt](#) confine desuetaque. _Sanguine_ anteit\nemerguntque expugnacior est pennas iniqui ecce **haeret** genus: peiora imagine\nfossas Cephisos formosa! Refugitque amata [refelli](#)\nsupplex. Summa brevis vetuere tenebas, hostes vetantis, suppressit, arreptum\nregna. Postquam conpescit iuvenis habet corpus, et erratica, perdere, tot mota\nars talis.\n\n```c\ndigital.webcam_dual_frequency = webmasterMms;\nif (5 + language_standalone_google) {\n    cc_inbox_layout *= file_character;\n    task += p;\n    lockUnicode += enterprise_monochrome(tokenFunctionPersonal, keyVirtual,\n            adf);\n}\nwindows_binary_esports(87734, array(restoreRomTopology, adRaw(407314),\n        dongleBashThumbnail), interpreter);\n```\n\nSit volat naturam; motu Cancri. Erat pro simul quae valuit quoque timorem quam\nproelia: illo patrio _esse summus_, enim sua serpentibus, Hyleusque. Est coniuge\nrecuso; refert Coroniden ignotos manat, adfectu.",
    "_meta": {
      "filePath": "why-supabase-is-the-best-choice-for-your-next-side-project/page.mdx",
      "fileName": "page.mdx",
      "directory": "why-supabase-is-the-best-choice-for-your-next-side-project",
      "extension": "mdx",
      "path": "why-supabase-is-the-best-choice-for-your-next-side-project/page"
    },
    "slug": "why-supabase-is-the-best-choice-for-your-next-side-project",
    "readTime": 5
  }
]